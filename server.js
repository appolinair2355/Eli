/* server.js ‚Äì Render.com ‚Äì port 10000 */
require("dotenv").config();
const express = require("express");
const { OpenAI } = require("openai");
const fs = require("fs");
const path = require("path");

const app = express();
const PORT = process.env.PORT || 10000;

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

app.use(express.json());
app.use(express.static("public"));

/* -------- ordre EXACT demand√© (6 ‚Üí A) -------- */
const ORDER_6A = [
  // ‚ô†
  "A‚ô†","K‚ô†","Q‚ô†","J‚ô†","10‚ô†","9‚ô†","8‚ô†","7‚ô†","6‚ô†",
  // ‚ô¶
  "A‚ô¶","K‚ô¶","Q‚ô¶","J‚ô¶","10‚ô¶","9‚ô¶","8‚ô¶","7‚ô¶","6‚ô¶",
  // ‚ô£
  "A‚ô£","K‚ô£","Q‚ô£","J‚ô£","10‚ô£","9‚ô£","8‚ô£","7‚ô£","6‚ô£",
  // ‚ô•
  "A‚ô•","K‚ô•","Q‚ô•","J‚ô•","10‚ô•","9‚ô•","8‚ô•","7‚ô•","6‚ô•"
];

/* -------- normalisation -------- */
function normalize(str = "") {
  return String(str)
    .replace(/\ufe0f/g, "")     // variation selector invisible
    .replace(/T/gi, "10")       // T ‚Üí 10
    .replace(/1\D?0/g, "10")    // "1 0", "1-0" ‚Üí 10
    .replace(/\s+/g, " ")
    .trim();
}

/* -------- utilitaires -------- */
const CARD_RE_6A = /(10|[6-9]|[AJQK])[‚ô†‚ô¶‚ô£‚ô•]/g;

/* ‚úÖ Correction ici */
function firstParenContent(line) {
  const m = line.match(/\(([^)]*)\)/);  // r√©cup√®re le contenu entre parenth√®ses
  return m ? m[1] : "";
}

function extractNumTotal(line) {
  const m = line.match(/#N?(\d+).(\d+)/);
  return m ? { num: m[1], total: m[2] } : { num: "?", total: "?" };
}

/* -------- traitement d√©terministe -------- */
function analyzeHandsDeterministic(rawInput) {
  const lines = String(rawInput).split(/\r?\n/).map(normalize).filter(Boolean);
  const results = [];

  for (const raw of lines) {
    // 1) nettoyage
    const clean = normalize(
      raw.replace(/‚úÖ|üîµ#R|#R|#T\d+|‚Äî|‚Äì| - | -|-|‚Ä¢/g, " ")
    );

    // 2) ne garder que la 1 ≥·µâ parenth√®se  
    const inside = normalize(firstParenContent(clean));  
    if (!inside) continue;  

    // 3) extraire les cartes
    const cards = [...inside.matchAll(CARD_RE_6A)].map(m => m[0]);  
    if (!cards.length) continue;  

    // 4) ligne canonique
    const { num, total } = extractNumTotal(clean);  
    const lineOut = `#N${num}.${total}(${inside})`;  

    for (const key of cards) results.push({ key, line: lineOut });
  }

  if (!results.length) return "(Aucune main valide trouv√©e dans la 1√®re parenth√®se)";

  // tri strict
  const normOrder = ORDER_6A.map(normalize);
  results.sort((a, b) => normOrder.indexOf(normalize(a.key)) - normOrder.indexOf(normalize(b.key)));

  // regroupement
  const out = [];
  let currentKey = null;
  let bucket = new Set();

  const flush = () => {
    if (currentKey) {
      out.push(currentKey);
      for (const l of bucket) out.push(l);
      out.push("");
    }
  };

  for (const r of results) {
    if (r.key !== currentKey) {
      flush();
      currentKey = r.key;
      bucket = new Set();
    }
    bucket.add(r.line);
  }
  flush();

  return out.join("\n").trim();
}

/* -------- routes -------- */
app.post("/process", (req, res) => {
  try {
    const result = analyzeHandsDeterministic(req.body.data || "");
    res.json({ success: true, result });
  } catch (err) {
    res.json({ success: false, error: err.message });
  }
});

app.post("/ask", async (req, res) => {
  const { data, question } = req.body || {};
  const q = normalize(question || "").toLowerCase();

  if (q.startsWith("analyse ces mains")) {
    try {
      const text = analyzeHandsDeterministic(data || "");
      return res.type("text/plain; charset=utf-8").send(text);
    } catch (err) {
      return res.status(500).type("text/plain").send("Erreur analyse: " + err.message);
    }
  }

  try {
    const stream = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { role: "system", content: "Tu es un assistant sp√©cialis√© dans l‚Äôanalyse de mains de cartes. R√©ponds en fran√ßais." },
        { role: "user", content: `Mains :\n${data}\n\nQuestion : ${question}` }
      ],
      stream: true
    });

    res.setHeader("Content-Type", "text/plain; charset=utf-8");  
    for await (const chunk of stream) {  
      const delta = chunk.choices[0]?.delta?.content;  
      if (delta) res.write(delta);  
    }  
    res.end();

  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

/* ===== LICENCE SYSTEM ===== */
const LICENCE_FILE = path.join(__dirname, "licences.json");

app.post("/api/check-licence", (req, res) => {
  try {
    const { licence } = req.body;
    if (!licence) {
      return res.json({ valid: false, message: "Licence manquante." });
    }

    const licences = JSON.parse(fs.readFileSync(LICENCE_FILE, "utf8"));
    const found = licences.find(l => l.key === licence);

    if (!found) {
      return res.json({ valid: false, message: "Licence invalide !" });
    }

    if (!found.active) {
      return res.json({ valid: false, message: "Licence d√©sactiv√©e." });
    }

    if (found.expiresAt && new Date(found.expiresAt) < new Date()) {
      return res.json({ valid: false, message: "Licence expir√©e." });
    }

    return res.json({ valid: true });
  } catch (err) {
    console.error("Erreur check-licence:", err);
    return res.status(500).json({ valid: false, message: "Erreur serveur." });
  }
});

app.get("/api/licences", (req, res) => {
  try {
    const licences = JSON.parse(fs.readFileSync(LICENCE_FILE, "utf8"));
    res.json(licences);
  } catch (err) {
    console.error("Erreur lecture licences.json:", err);
    res.status(500).json({ message: "Impossible de charger les licences." });
  }
});

app.post("/api/add-licence", (req, res) => {
  try {
    const { key, categorie, expiresAt } = req.body;
    if (!key) return res.status(400).json({ message: "Cl√© de licence manquante." });

    let licences = JSON.parse(fs.readFileSync(LICENCE_FILE, "utf8"));

    if (licences.find(l => l.key === key)) {
      return res.status(400).json({ message: "Cette licence existe d√©j√†." });
    }

    const newLicence = {
      key,
      categorie: categorie || "Standard",
      active: true,
      expiresAt: expiresAt || null
    };

    licences.push(newLicence);
    fs.writeFileSync(LICENCE_FILE, JSON.stringify(licences, null, 2));

    res.json({ message: "Licence ajout√©e avec succ√®s", licence: newLicence });
  } catch (err) {
    console.error("Erreur add-licence:", err);
    res.status(500).json({ message: "Erreur serveur." });
  }
});

/* -------- D√©marrage -------- */
app.listen(PORT, () => console.log(`‚úÖ Serveur d√©marr√© sur le port ${PORT}`));
