/* server.js â€“ Render.com â€“ port 10000 */
require("dotenv").config();
const express = require("express");
const path = require("path");
const { OpenAI } = require("openai");

const app = express();
const PORT = process.env.PORT || 10000;

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

app.use(express.json());
app.use(express.static("public"));

/* ---------- ordre COMPLET 2â€“As ---------- */
const order = [
  // â™ 
  "Aâ™ ","Kâ™ ","Qâ™ ","Jâ™ ","10â™ ","9â™ ","8â™ ","7â™ ","6â™ ","5â™ ","4â™ ","3â™ ","2â™ ",
  // â™¦
  "Aâ™¦","Kâ™¦","Qâ™¦","Jâ™¦","10â™¦","9â™¦","8â™¦","7â™¦","6â™¦","5â™¦","4â™¦","3â™¦","2â™¦",
  // â™£
  "Aâ™£","Kâ™£","Qâ™£","Jâ™£","10â™£","9â™£","8â™£","7â™£","6â™£","5â™£","4â™£","3â™£","2â™£",
  // â™¥
  "Aâ™¥","Kâ™¥","Qâ™¥","Jâ™¥","10â™¥","9â™¥","8â™¥","7â™¥","6â™¥","5â™¥","4â™¥","3â™¥","2â™¥"
];

/* ---------- normalisation des cartes ---------- */
function normalize(str) {
  return str
    .replace(/\ufe0f/g, "")   // supprime variation selector invisible
    .replace(/T/g, "10")      // T â†’ 10
    .replace(/1\s0/g, "10")   // "1 0" â†’ "10"
    .trim();
}

/* ---------- traitement cartes ---------- */
function processCardData(input) {
  const lines = input.trim().split("\n").filter(Boolean);
  const hands = [];

  for (const line of lines) {
    // Supprimer les tags inutiles et normaliser
    const cleanLine = normalize(line.replace(/âœ…|ğŸ”µ#R|#T\d+|-/g, "").trim());

    // Extraire la premiÃ¨re parenthÃ¨se
    const m = cleanLine.match(/#N?(\d+)\.(\d+)\(([^)]+)\)/);
    if (!m) continue;

    const [, num, total, cards] = m;
    const normalizedCards = normalize(cards);

    // Chercher toutes les cartes valides dans cette main
    const foundKeys = order
      .map(normalize)
      .filter(c => normalizedCards.includes(c));

    if (!foundKeys.length) continue;

    // Ajouter une copie de la main pour chaque carte valide
    for (const key of foundKeys) {
      hands.push({
        key,
        line: `#N${num}.${total}(${cards})`
      });
    }
  }

  if (!hands.length) return "(Aucune main valide trouvÃ©e)";

  // Trier selon lâ€™ordre global
  const normalizedOrder = order.map(normalize);
  hands.sort((a, b) => normalizedOrder.indexOf(a.key) - normalizedOrder.indexOf(b.key));

  // Regrouper
  const grouped = [];
  let lastKey = null;
  for (const h of hands) {
    if (h.key !== lastKey) {
      grouped.push({ key: h.key, lines: [] });
    }
    grouped[grouped.length - 1].lines.push(h.line);
    lastKey = h.key;
  }

  // Construire sortie
  const out = [];
  grouped.forEach(g => {
    out.push(g.key);
    out.push(...[...new Set(g.lines)]); // Ã©viter doublons
    out.push("");
  });

  return out.join("\n").trim();
}

/* ---------- routes ---------- */
app.post("/process", (req, res) => {
  try {
    const result = processCardData(req.body.data || "");
    res.json({ success: true, result });
  } catch (err) {
    res.json({ success: false, error: err.message });
  }
});

app.post("/ask", async (req, res) => {
  const { data, question } = req.body;
  if (!question) return res.status(400).json({ error: "Question manquante" });

  const q = question.toLowerCase().trim();

  if (q === "nom" || q.includes("nom")) return res.type("text/plain").send("Sossou");
  if (q === "prÃ©nom" || q.includes("prÃ©nom") || q.includes("prenom"))
    return res.type("text/plain").send("KouamÃ©");
  if (q.includes("nom complet") || q.includes("qui es-tu"))
    return res.type("text/plain").send("Sossou KouamÃ©");

  const devKeywords = [
    "dÃ©veloppeur",
    "developpeur",
    "crÃ©ateur",
    "auteur",
    "qui a fait",
    "qui est l'auteur"
  ];
  if (devKeywords.some(kw => q.includes(kw))) {
    return res
      .type("text/plain")
      .send(
        "SOSSOU KouamÃ© Appolinaire est le dÃ©veloppeur de cette IA. NÃ© en CÃ´te dâ€™Ivoire, technicien supÃ©rieur en gÃ©nie civil, il crÃ©e aussi des bots Telegram. WhatsApp : +229 01 67 92 40 76."
      );
  }

  try {
    const stream = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { role: "system", content: "Tu es un assistant spÃ©cialisÃ© dans lâ€™analyse de mains de cartes. RÃ©ponds en franÃ§ais." },
        { role: "user", content: `Mains :\n${data}\n\nQuestion : ${question}` }
      ],
      stream: true
    });

    res.setHeader("Content-Type", "text/plain; charset=utf-8");
    for await (const chunk of stream) {
      const delta = chunk.choices[0]?.delta?.content;
      if (delta) res.write(delta);
    }
    res.end();
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.listen(PORT, () => console.log(`âœ… Serveur dÃ©marrÃ© sur le port ${PORT}`));
